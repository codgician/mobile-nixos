#!/usr/bin/env nix-shell
#!nix-shell -p ruby -i ruby
#!nix-shell -p hydra

# This script uses hydra's `hydra-eval-jobs` to evaluate a given expression,
# defaulting to `release.nix`.

require "open3"
require "json"
require "shellwords"

def fmt_time(seconds)
  if seconds < 1
    return "#{seconds.round(2)} seconds"
  end
  seconds = seconds.to_f().round()

  [
    [ 60, "second" ],
    [ 60, "minute" ],
    [ nil, "hour" ],
  ].reduce([seconds, []]) do |coll, pair|
    leftover, elements = coll
    amount, name = pair
    if amount
      current = leftover % amount
      leftover = leftover / amount
    else
      current = leftover
      leftover = 0
    end

    name = "#{name}s" if current != 1
    if current != 0
      elements.unshift("%d %s" % [ current, name ])
    end
    
    [leftover, elements]
  end.last().join(", ")
end

class Array
  def pretty_shelljoin()
    # Weird flex, but for printing it's much better than `#shelljoin`...
    self.map do |arg|
      if arg.shellescape.match(/\\/)
        arg.inspect
      else
        arg
      end
    end.join(" ")
  end
end

module MD
  extend self

  def _title(s, level)
    "\n#{"#" * level} #{s}\n\n"
  end

  def title(s)
    "\n#{s}\n#{s.gsub(/./, "=")}\n\n"
  end

  def section(s)
    "\n#{s}\n#{s.gsub(/./, "-")}\n\n"
  end

  def list_item(s)
    "  * #{s}"
  end

  def code(s)
    "`#{s}`"
  end

  def pre(s)
    "```\n#{s}\n```"
  end

  def paragraph(s)
    "#{s.strip}\n\n"
  end

  def subtitle(s)
    _title(s, 3)
  end
end

# Usage and help
$print_usage = ARGV.grep(/^(-h|--help)$/).length > 0

$cmd =
  if ARGV.length == 0 || $print_usage
    begin
      root = File.join(__dir__(), "..")
      nixpkgs, _ = Open3.capture2("nix-instantiate", "--eval", File.join(root, "pkgs.nix"), "-A", "pkgs.path")
      nixpkgs = nixpkgs.strip()

      [
        "./release.nix",
        "--option", "pure-eval", "true",
        "-I", "nixpkgs=#{nixpkgs}",
        "-I", root,
        "--arg", "pkgs", "import <nixpkgs> {}",
        "--arg", "systems", '[ "x86_64-linux" "aarch64-linux" ]',
      ]
    end
  else
    []
  end

def usage(io=$stdout)
  io.puts "Usage: bin/hydra-eval [args...]"
  io.puts ""
  io.puts "Arguments are passed-through to `hydra-eval-jobs`."
  io.puts ""
  io.puts "When no argument is given, default arguments are provided."
  io.puts ""
  io.puts "Equivalent to:"
  io.puts "  $ #{["bin/hydra-eval", *$cmd].pretty_shelljoin}"
  io.puts ""
end

if $print_usage
  usage()
  exit 0
end

$cmd += ARGV

# Run the eval
timer_start = Time.now()
$stderr.puts " $ hydra-eval-jobs #{$cmd.pretty_shelljoin}"
out, ret = Open3.capture2({}, "hydra-eval-jobs", *$cmd)
timer_end = Time.now()

# Read the output JSON
hydra_eval = JSON.parse(out)
File.write("result-eval.json", out)

errors, valid_jobs = hydra_eval.partition do |k, v|
  v.has_key?("error")
end.map(&:to_h)

out = $stdout

out.puts MD.title "Hydra-like evaluation"

out.puts MD.paragraph "Command used to generate this report:"
out.puts MD.pre " $ " + (["bin/hydra-eval"] + ARGV).pretty_shelljoin()

out.puts MD.paragraph "Evaluation took: #{fmt_time(timer_end - timer_start)}"

out.puts MD.section "#{valid_jobs.length} valid jobs"

valid_jobs.each do |attrname, job|
  out.puts MD.list_item(
    MD.code(attrname) +
    " â†’ " +
    MD.code(job["drvPath"])
  )
end

out.puts MD.section "#{errors.length} errors"

errors.each do |attrname, obj|
  out.puts MD.subtitle(MD.code(attrname))
  out.puts MD.pre(obj["error"])
end

# vim: ft=ruby
